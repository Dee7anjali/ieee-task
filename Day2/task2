1. Prime Number Checker: 
   Write a function that checks if a given number is prime. A prime number is a number greater than 1 that has no divisors other than 1 and itself.  
   Example:  
   Input: 17  
   Output: True  
   Input: 18  
   Output: False
Ans :public class PrimeCheck {
    public static boolean isPrime(int n) {
        // Check if the number is less than 2
        if (n <= 1) {
            return false;
        }
        // Check for factors from 2 to the square root of n
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int number = 29;
        if (isPrime(number)) {
            System.out.println(number + " is a prime number.");
        } else {
            System.out.println(number + " is not a prime number.");
        }
    }
}


2. Strong Number:  
   Write a function that checks if a given number is a strong number. A strong number is a number that is equal to the sum of factorials of the individual digits.  
   Example: 
   Input: 145  
   Output: True
   Explanation: 1!+4!+5! = 145  
   Input: 132  
   Output: False
Ans : import java.util.Scanner;

public class StrongNumberCheck {
    // Function to calculate the factorial of a digit
    public static int factorial(int n) {
        int fact = 1;
        for (int i = 1; i <= n; i++) {
            fact *= i;
        }
        return fact;
    }

    // Function to check if a number is a strong number
    public static boolean isStrongNumber(int num) {
        int originalNum = num;
        int sum = 0;

        while (num > 0) {
            int digit = num % 10;
            sum += factorial(digit);
            num /= 10;
        }

        return sum == originalNum;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (isStrongNumber(number)) {
            System.out.println(number + " is a strong number.");
        } else {
            System.out.println(number + " is not a strong number.");
        }

        scanner.close();
    }
}


3. Sum of Digits:
   Write a function that calculates the sum of all digits in a given integer.  
   Example:  
   Input: 12345  
   Output: 15 
Ans : public class SumOfDigits {
    public static int sumDigits(int number) {
        int sum = 0;
        while (number != 0) {
            sum += number % 10; // Add the last digit to sum
            number /= 10; // Remove the last digit
        }
        return sum;
    }

    public static void main(String[] args) {
        int number = 12345; // Example number
        System.out.println("Sum of digits: " + sumDigits(number)); // Output: 15
    }
}


4. Find Maximum Number: 
   Write a function that finds the maximum number in a given list of integers.  
   Example:  
   Input: [1, 7, 3, 9, 2]  
   Output: 9
Ans : import java.util.List;
import java.util.Arrays;

public class MaxNumber {
    public static int findMax(List<Integer> numbers) {
        int max = Integer.MIN_VALUE;
        for (int number : numbers) {
            if (number > max) {
                max = number;
            }
        }
        return max;
    }

    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(10, 20, 30, 40, 50); // Example list
        System.out.println("The maximum number is: " + findMax(numbers)); // Output: 50
    }
}


5. Fibonacci Sequence:  
   Write a function that takes a number as input and returns a list of Fibonacci numbers of length equal to that number.  
   Example:  
   Input: 5  
   Output: [0,1,1,2,3]
Ans : import java.util.ArrayList;
import java.util.List;

public class FibonacciList {
    public static List<Integer> generateFibonacci(int length) {
        List<Integer> fibonacciList = new ArrayList<>();
        if (length <= 0) {
            return fibonacciList; // Return an empty list for non-positive lengths
        }
        
        int num1 = 0, num2 = 1;
        fibonacciList.add(num1);
        
        for (int i = 1; i < length; i++) {
            fibonacciList.add(num2);
            int nextNum = num1 + num2;
            num1 = num2;
            num2 = nextNum;
        }
        
        return fibonacciList;
    }

    public static void main(String[] args) {
        int length = 10; // Example length
        List<Integer> fibonacciNumbers = generateFibonacci(length);
        System.out.println("Fibonacci numbers: " + fibonacciNumbers);
    }
}
